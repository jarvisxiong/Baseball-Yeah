/*
 * bootstrap-table - v1.10.1 - 2016-02-17
 * https://github.com/wenzhixin/bootstrap-table
 * Copyright (c) 2016 zhixin wen
 * Licensed MIT License
 */
(function ($) {
    'use strict';
    var sprintf = $.fn.bootstrapTable.utils.sprintf;
    var TYPE_NAME = {
        json: 'JSON',
        xml: 'XML',
        png: 'PNG',
        csv: 'CSV',
        txt: 'TXT',
        sql: 'SQL',
        doc: 'MS-Word',
        excel: 'MS-Excel',
        powerpoint: 'MS-Powerpoint',
        pdf: 'PDF'
    };
    $.extend($.fn.bootstrapTable.defaults, {
        showExport: false,
        exportDataType: 'basic',
        exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],
        exportOptions: {}
    });
    $.extend($.fn.bootstrapTable.defaults.icons, {export: 'glyphicon-export icon-share'});
    var BootstrapTable = $.fn.bootstrapTable.Constructor, _initToolbar = BootstrapTable.prototype.initToolbar;
    BootstrapTable.prototype.initToolbar = function () {
        this.showToolbar = this.options.showExport;
        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));
        if (this.options.showExport) {
            var that = this, $btnGroup = this.$toolbar.find('>.btn-group'), $export = $btnGroup.find('div.export');
            if (!$export.length) {
                $export = $(['<div class="export btn-group">', '<button class="btn btn-default' + sprintf(' btn-%s', this.options.iconSize) + ' dropdown-toggle" ' + 'data-toggle="dropdown" type="button">', sprintf('<i class="%s %s"></i> ', this.options.iconsPrefix, this.options.icons.export), '<span class="caret"></span>', '</button>', '<ul class="dropdown-menu" role="menu">', '</ul>', '</div>'].join('')).appendTo($btnGroup);
                var $menu = $export.find('.dropdown-menu'), exportTypes = this.options.exportTypes;
                if (typeof this.options.exportTypes === 'string') {
                    var types = this.options.exportTypes.slice(1, -1).replace(/ /g, '').split(',');
                    exportTypes = [];
                    $.each(types, function (i, value) {
                        exportTypes.push(value.slice(1, -1))
                    })
                }
                $.each(exportTypes, function (i, type) {
                    if (TYPE_NAME.hasOwnProperty(type)) {
                        $menu.append(['<li data-type="' + type + '">', '<a href="javascript:void(0)">', TYPE_NAME[type], '</a>', '</li>'].join(''))
                    }
                });
                $export.click(function () {
                    if (that.options.exportAllExcel) {
                        $(this).find("a").attr('href', that.options.exportAllExcel());
                    }
                })
                $menu.find('li').click(function () {
                    var type = $(this).data('type'), doExport = function () {
                        that.$el.tableExport($.extend({}, that.options.exportOptions, {type: type, escape: false}))
                    };
                    doExport()
                });
                if (this.options.exportAllExcel) {
                    $menu.append('<li data-type="excel"><a id="" href="#">MS-Excel(all)</a></li>');
                    // $menu.append('<li data-type="excel"><a href="javascript:void(0)" onclick="exportExcelAll();">MS-Excel(all)</a></li>')
                }
            }
        }
    }
})(jQuery);